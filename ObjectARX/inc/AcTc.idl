//////////////////////////////////////////////////////////////////////////////
//
//                 (C) Copyright 1982-2003 by Autodesk, Inc.
//
// Permission to use, copy, modify, and distribute this software in
// object code form for any purpose and without fee is hereby granted, 
// provided that the above copyright notice appears in all copies and 
// that both that copyright notice and the limited warranty and
// restricted rights notice below appear in all supporting 
// documentation.
//
// AUTODESK PROVIDES THIS PROGRAM "AS IS" AND WITH ALL FAULTS. 
// AUTODESK SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTY OF
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR USE.  AUTODESK, INC. 
// DOES NOT WARRANT THAT THE OPERATION OF THE PROGRAM WILL BE
// UNINTERRUPTED OR ERROR FREE.
//
// Use, duplication, or disclosure by the U.S. Government is subject to 
// restrictions set forth in FAR 52.227-19 (Commercial Computer
// Software - Restricted Rights) and DFAR 252.227-7013(c)(1)(ii)
// (Rights in Technical Data and Computer Software), as applicable.
//
//////////////////////////////////////////////////////////////////////////////
//
// Name:			AcTc.idl
//
// Description:		This file will be processed by the MIDL tool to
//					produce the type library (AcTc.tlb) and marshalling code.
//
//////////////////////////////////////////////////////////////////////////////
#ifdef FOR_RDFTOOL
#include "custattr.h"
#endif

typedef enum 
{
	kEditDefault,
	kEditCustom,
	kEditNone

} ToolEditMode;

typedef enum
{
    kContextNone = -1,
	kContextMenuPaletteTool,
	kContextMenuEditorImage,
    kContextMenuPaletteBackground

} ContextMenuFlag;

typedef enum
{
	kContextMenuShow,
	kContextMenuHide,
	kExecutionCanceled,
	kExecutionCancelRejected,
    kContextMenuUpdatePalette

} ReturnFlag;

typedef enum
{
	kLButtonClicked,
	kDroppedInDrawing
} ExecutionContext;


import "oaidl.idl";
import "ocidl.idl";
[
	object,
	uuid(C8498A0F-A997-454B-AC19-9555139DFB10),
	dual,
	helpstring("IAcadToolProperties Interface"),
#ifdef FOR_RDFTOOL
        custom(CUSTATTR_DONOTREGISTER,0),
#endif
	pointer_default(unique)
]
interface IAcadToolProperties : IDispatch
{
		[propget, id(1), helpstring("property ID")] HRESULT ID([out, retval] GUID* pId);
		[propget, id(2), helpstring("property Name")] HRESULT Name([out, retval] BSTR *pVal);
		[propput, id(2), helpstring("property Name")] HRESULT Name([in] BSTR newVal);
		[propget, id(3), helpstring("property Description")] HRESULT Description([out, retval] BSTR *pVal);
		[propput, id(3), helpstring("property Description")] HRESULT Description([in] BSTR newVal);
		[propget, id(4), helpstring("property ToolTipText")] HRESULT ToolTipText([out, retval] BSTR *pVal);
		[propput, id(4), helpstring("property ToolTipText")] HRESULT ToolTipText([in] BSTR newVal);
		[propget, id(5), helpstring("property HelpFile")] HRESULT HelpFile([out, retval] BSTR *pVal);
		[propput, id(5), helpstring("property HelpFile")] HRESULT HelpFile([in] BSTR newVal);
		[propget, id(6), helpstring("property HelpCommand")] HRESULT HelpCommand([out, retval] BSTR *pVal);
		[propput, id(6), helpstring("property HelpCommand")] HRESULT HelpCommand([in] BSTR newVal);
		[propget, id(7), helpstring("property HelpData")] HRESULT HelpData([out, retval] BSTR *pVal);
		[propput, id(7), helpstring("property HelpData")] HRESULT HelpData([in] BSTR newVal);
		[propget, id(8), helpstring("property IsReadOnly")] HRESULT IsReadOnly([out, retval] VARIANT_BOOL *pReadOnly);
		[id(9), helpstring("method GetImage")] HRESULT GetImage([in] long cx, [in] long cy, [out] IUnknown* *pVal, [out] BSTR *sResourceName, [out] BSTR *sSourceFile);
        [id(10), helpstring("method SetImage")] HRESULT SetImage([in] long cx, [in] long cy, [in] IUnknown* newVal, [in] BSTR sResourceName, [in] BSTR sSourceFile);
        [id(11), helpstring("method GetCustomData")] HRESULT GetCustomData([out, retval] IUnknown ** ppVal);
};

[
	object,    
	uuid(91C0D43F-507D-46f3-8D54-C11143B270FF),
	dual,
	helpstring("IAcadToolProperties2 Interface"),
#ifdef FOR_RDFTOOL
        custom(CUSTATTR_DONOTREGISTER,0),
#endif
	pointer_default(unique)
]
interface IAcadToolProperties2 : IDispatch
{
        [propget, id(12), helpstring("property ToolType")] HRESULT ToolType([out, retval] LONG* pToolType);
        [propput, id(12), helpstring("property ToolType")] HRESULT ToolType([in] LONG lToolType);        
        [propget, id(13), helpstring("property IsFlyoutEnabled")] HRESULT IsFlyoutEnabled([out, retval] VARIANT_BOOL* pEnabled);
        [propput, id(13), helpstring("property IsFlyoutEnabled")] HRESULT IsFlyoutEnabled([in] VARIANT_BOOL bUseFlyout);                        
        [propget, id(14), helpstring("property ShapePackageId")] HRESULT ShapePackageId([out, retval] GUID* pId);
        [propput, id(14), helpstring("property ShapePackageId")] HRESULT ShapePackageId([in] GUID* pId);
        [id(15), helpstring("method GetCurrentShape")] HRESULT GetCurrentShape([out] IUnknown** ppTool);
        [propget, id(16), helpstring("property CurrentShapeId")] HRESULT CurrentShapeId([out, retval] GUID* pId);       
        [propput, id(16), helpstring("property CurrentShapeId")] HRESULT CurrentShapeId([in] GUID* pId);
        [propget, id(17), helpstring("property ActiveShapeIds")] HRESULT ActiveShapeIds([out, retval] VARIANT* pShapes);               
        [propput, id(17), helpstring("property ActiveShapeIds")] HRESULT ActiveShapeIds([in] VARIANT* pShapes);               
        [id(18), helpstring("method GetOverlayImage")] HRESULT GetOverlayImage([out] IUnknown** pVal, [out] BSTR* pResourceName, [out] BSTR* pSourceFile);
        [id(19), helpstring("method SetOverlayImage")] HRESULT SetOverlayImage([in] IUnknown* newVal, [in] BSTR sResourceName, [in] BSTR sSourceFile);            
};

[
	object,
	uuid(F3D70D77-8B79-4277-99E4-704E4C17DC6E),
	helpstring("IAcadStockTool"),
	pointer_default(unique),
	local,
#ifdef FOR_RDFTOOL
        custom(CUSTATTR_DONOTREGISTER,0),
#endif
	oleautomation
]
interface IAcadStockTool : IUnknown
{
	[id(1), helpstring("method CreateTool")] HRESULT CreateTool([out, retval] IUnknown** ppTool);
};

[
	object,
	uuid(BF9A27C9-5FB5-4DB9-B910-2AC3487C95B2),
	helpstring("IAcadToolContextMenu"),
	pointer_default(unique),
	local,
#ifdef FOR_RDFTOOL
        custom(CUSTATTR_DONOTREGISTER,0),
#endif
	oleautomation
]
interface IAcadToolContextMenu : IUnknown
{
	[id(1), helpstring("method Customize")] HRESULT Customize([in] int nContextFlag, [in] DWORD/*HMENU*/ hMenu, [in] UINT idCmdFirst,[in]  UINT idCmdLast, [in] GUID* pPaletteId, [out, retval] DWORD* pFlag);
	[id(2), helpstring("method GetMenuHelp")] HRESULT GetMenuHelp([in] UINT idCmd, [out, retval]BSTR* pbstrHelpText);
	[id(3), helpstring("method InvokeMenuCommand")] HRESULT InvokeMenuCommand([in] UINT idCmd, [in] GUID* pPaletteId, [in] DWORD /*HWND*/ hWnd, [out, retval] DWORD* pFlag);
};

[ object, uuid(7B064668-E0BE-4fdf-9322-DC484024878F),
	helpstring("IAcadTool"),
	pointer_default(unique),
	local,
#ifdef FOR_RDFTOOL
        custom(CUSTATTR_DONOTREGISTER,0),
#endif
	oleautomation
]
interface IAcadTool : IUnknown
{
	[propget, id(1), helpstring("property EditMode")] HRESULT EditMode([out, retval] long* pVal);
	[id(2), helpstring("method GetStockTool")] HRESULT GetStockTool([out, retval] IUnknown** ppToolClass);
	[id(3), helpstring("method SetToolProperties")] HRESULT SetToolProperties([in] IUnknown* pProp);
	[id(4), helpstring("method Load")] HRESULT Load([in] IUnknown* pXmlElement);
	[id(5), helpstring("method Save")] HRESULT Save([in] IUnknown* pXmlElement);
	[id(6), helpstring("method Execute")] HRESULT Execute([in] long lFlag, [in] DWORD /*HWND*/ hWnd, [in] DWORD point, [in] DWORD dwKeyState);
	[id(7), helpstring("method GetData")] HRESULT GetData([in] VARIANT *pObjUnkArray, [in] VARIANT *pDynUnkArray);
	[id(8), helpstring("method BeginEdit")] HRESULT BeginEdit();
	[id(9), helpstring("method Edit")] HRESULT Edit([in] IUnknown* pProp, [in] LONG /*HWND*/ hWndParent, [out] VARIANT_BOOL* pRet);
	[id(10), helpstring("method EndEdit")] HRESULT EndEdit([in] VARIANT_BOOL bEditCancelled);
	[id(11), helpstring("method New")] HRESULT New();
	[id(12), helpstring("method GetDropTarget")] HRESULT GetDropTarget([out, retval] IUnknown** ppDropTarget);
	[id(13), helpstring("method GetContextMenu")] HRESULT GetContextMenu([in] int nContextFlag, [in] DWORD/*HMENU*/ hMenu, [in] UINT idCmdFirst,[in]  UINT idCmdLast, [out, retval] DWORD* pFlag);
	[id(14), helpstring("method GetCommandString")] HRESULT GetCommandString([in] UINT idCmd, [out, retval]BSTR* pbstrHelpText);
	[id(15), helpstring("method InvokeCommand")] HRESULT InvokeCommand([in] UINT idCmd, [in] DWORD /*HWND*/ hWnd);
	[id(16), helpstring("method GetDragDropContextInfo")] HRESULT GetDragDropContextInfo([in] IUnknown*	pIUnknown, [out]BSTR* pbstrText, [out] DWORD* pFlag);
    [id(17), helpstring("method Dropped")] HRESULT Dropped([in] BSTR bstrUrl);
    [id(18), helpstring("method Refreshed")] HRESULT Refreshed([in] BSTR bstrUrl);
    [id(19), helpstring("method SetEditorWindow")] HRESULT SetEditorWindow([in] LONG /*HWND*/ hWndEditor, [in] IUnknown* 	pPropInspector);
    [id(20), helpstring("method ValidateEditChanges")] HRESULT ValidateEditChanges();    
    [id(21), helpstring("method GetToolProperties")] HRESULT GetToolProperties([out, retval] IUnknown** pToolProp);
};

[ object, uuid(167E99DB-E7BA-4bda-8C6A-47DC06CC12F6),
	helpstring("IAcadToolFlyoutShape"),
	pointer_default(unique),
	local,
#ifdef FOR_RDFTOOL
        custom(CUSTATTR_DONOTREGISTER,0),
#endif
	oleautomation
]
interface IAcadToolFlyoutShape : IUnknown
{
	[id(1), helpstring("method SetFlyoutTools")] HRESULT SetFlyoutTools([in] VARIANT* pFlyoutToolIds);
};

[
	object,
	uuid(6FE6AD02-DDE9-4619-A77A-05A183D613AD),
	helpstring("IAcadToolDropTarget"),
	pointer_default(unique),
	local,
#ifdef FOR_RDFTOOL
        custom(CUSTATTR_DONOTREGISTER,0),
#endif
	oleautomation
]
interface IAcadToolDropTarget : IUnknown
{
	[id(1), helpstring("method DragEnter")] HRESULT DragEnter([in] IDataObject* pDataObj,
        [in] DWORD grfKeyState, [in] POINTL pt, [in, out] DWORD* pdwEffect);
    [id(2), helpstring("method DragOver")] HRESULT DragOver([in] DWORD grfKeyState, 
        [in] POINTL pt, [in, out] DWORD* pdwEffect);
    [id(3), helpstring("method DragLeave")] HRESULT DragLeave(void);
    [id(4), helpstring("method Drop")] HRESULT Drop([in] IDataObject* pDataObj,
        [in] DWORD grfKeyState, [in] POINTL pt, [in, out] DWORD* pdwEffect,
        [in] GUID* pCurrentStockToolId, [in] GUID* pParentId, [out, retval] VARIANT* pNewToolIds);
    [id(5), helpstring("method GetDragDropContextMenuItem")] HRESULT GetDragDropContextMenuItem([in] IUnknown* pIUnknown, 
        [out] BSTR* pbstrText, [out] DWORD* pFlag);
};

[
	object,
	uuid(74A34F77-8C7B-4a43-B3A8-D5BBFBC1F40C),
	helpstring("IAcadToolDragSource"),
	pointer_default(unique),
	local,
#ifdef FOR_RDFTOOL
        custom(CUSTATTR_DONOTREGISTER,0),
#endif
	oleautomation
]
interface IAcadToolDragSource : IUnknown
{
	[id(1), helpstring("method BeginDrag")] HRESULT BeginDrag([in] VARIANT* pToolIds,
        [in] VARIANT* pAllStockToolIds, [in] GUID* pCurrentStockToolId, [in] IDataObject* pDataObject, 
        [in] DWORD dwKeyState);
	[id(2), helpstring("method DragInProgress")] HRESULT DragInProgress([in] DWORD dwDropEffect);
	[id(3), helpstring("method EndDrag")] HRESULT EndDrag([in] DWORD dwDropEffect);
    [id(4), helpstring("method DragEnterDrawing")] HRESULT DragEnterDrawing([in] IDataObject* pDataObject,
        [in] DWORD grfKeyState, [in] POINTL pt, [out, retval] DWORD* pDropEffect);
	[id(5), helpstring("method DragOverDrawing")] HRESULT DragOverDrawing([in] DWORD grfKeyState, 
        [in] POINTL pt, [out, retval] DWORD* pDropEffect);
    [id(6), helpstring("method DragLeaveDrawing")] HRESULT DragLeaveDrawing(void);
    [id(7), helpstring("method DropInDrawing")] HRESULT DropInDrawing([in] IDataObject* pDataObject,
        [in] DWORD grfKeyState, [in] POINTL pt, [out, retval] DWORD* pDropEffect);
};

[
	object,
	uuid(E1F1CB3B-5FC6-4eb8-86DD-AF0CFAFE6B00),
	helpstring("IAcadToolCopyPaste"),
	pointer_default(unique),
	local,
#ifdef FOR_RDFTOOL
        custom(CUSTATTR_DONOTREGISTER,0),
#endif
	oleautomation
]
interface IAcadToolCopyPaste : IUnknown
{
	[id(1), helpstring("method Copy")] HRESULT Copy([in] VARIANT* pToolIds,
        [in] VARIANT* pAllStockToolIds, [in] GUID* pCurrentStockToolId, [in] IDataObject* pDataObject);
	[id(2), helpstring("method Paste")] HRESULT Paste([in] GUID* pCurrentStockToolId,
        [in] GUID* pParentId, [in] IDataObject* pDataObject, [out, retval] VARIANT* pNewToolIds);
	[id(3), helpstring("method CanPaste")] HRESULT CanPaste([in] IDataObject* pDataObject, 
        [out, retval] VARIANT_BOOL* pCanPaste);
};


[
	object,
	uuid(BE67D23E-E36A-11D5-B4E5-00B0D03E954A),
	helpstring("IAcadToolImage Interface"),
	pointer_default(unique),
#ifdef FOR_RDFTOOL
        custom(CUSTATTR_DONOTREGISTER,0),
#endif
	local
]
interface IAcadToolImage : IUnknown
{
	[id(1), helpstring("method Load")] HRESULT Load([in] BSTR bsFileName);
	[id(2), helpstring("method Save")] HRESULT Save([in] BSTR bsFileName);
	[id(3), helpstring("method Render")] HRESULT Render([in] HDC hdc, [in] long x, [in] long y, [in] long cx, [in] long cy, [in] long nStyle, [in] VARIANT_BOOL bTransparentBitmap);
	[id(4), helpstring("method GetSize")] HRESULT GetSize([out] long* pWidth, [out] long* pHeight);
	[id(5), helpstring("method GetType")] HRESULT GetType([out] short* pType);
	[id(6), helpstring("method IsImageLoaded")] HRESULT IsImageLoaded([out] BOOL *pVal);
};

[
	uuid(8C14D9E3-3F03-4F53-8967-246552B3044C),
	version(1.0),
#ifdef FOR_RDFTOOL
        custom(CUSTATTR_DONOTREGISTER,0),
#endif
	helpstring("AcTc 1.0 Type Library")
]
library AcTcLib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");

	[
		uuid(497C8B53-E920-4450-8DD8-D73F83CB8F0F),
		helpstring("AcadToolProperties Class"),
#ifdef FOR_RDFTOOL
        custom(CUSTATTR_DONOTREGISTER,0),
#endif
		noncreatable
	]
	coclass AcadToolProperties
	{
		[default] interface IAcadToolProperties;
        interface IAcadToolProperties2;
	};
	[
		uuid(BE67D23F-E36A-11D5-B4E5-00B0D03E954A),
		helpstring("AcadToolImage Class")
	]
	coclass AcadToolImage
	{
		[default] interface IAcadToolImage;
	};
};
