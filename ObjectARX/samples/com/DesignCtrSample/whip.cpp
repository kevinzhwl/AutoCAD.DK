//
// (C) Copyright 1998-1999 by Autodesk, Inc. 
//
// Permission to use, copy, modify, and distribute this software in
// object code form for any purpose and without fee is hereby granted, 
// provided that the above copyright notice appears in all copies and 
// that both that copyright notice and the limited warranty and
// restricted rights notice below appear in all supporting 
// documentation.
//
// AUTODESK PROVIDES THIS PROGRAM "AS IS" AND WITH ALL FAULTS. 
// AUTODESK SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTY OF
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR USE.  AUTODESK, INC. 
// DOES NOT WARRANT THAT THE OPERATION OF THE PROGRAM WILL BE
// UNINTERRUPTED OR ERROR FREE.
//
// Use, duplication, or disclosure by the U.S. Government is subject to 
// restrictions set forth in FAR 52.227-19 (Commercial Computer
// Software - Restricted Rights) and DFAR 252.227-7013(c)(1)(ii)
// (Rights in Technical Data and Computer Software), as applicable.
//
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "whip.h"

/////////////////////////////////////////////////////////////////////////////
// CWhip

IMPLEMENT_DYNCREATE(CWhip, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CWhip properties

/////////////////////////////////////////////////////////////////////////////
// CWhip operations

void CWhip::SetBackColor(unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(DISPID_BACKCOLOR, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

unsigned long CWhip::GetBackColor()
{
	unsigned long result;
	InvokeHelper(DISPID_BACKCOLOR, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CWhip::SetBorderStyle(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(DISPID_BORDERSTYLE, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

short CWhip::GetBorderStyle()
{
	short result;
	InvokeHelper(DISPID_BORDERSTYLE, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CWhip::SetAppearance(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(DISPID_APPEARANCE, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

short CWhip::GetAppearance()
{
	short result;
	InvokeHelper(DISPID_APPEARANCE, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CWhip::SetUserInterfaceEnabled(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CWhip::GetUserInterfaceEnabled()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CWhip::Set_BrowserID(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CWhip::Get_BrowserID()
{
	long result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CWhip::Set_DisplayMode(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CWhip::Get_DisplayMode()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CWhip::SetStreamName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString CWhip::GetStreamName()
{
	CString result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CWhip::SetHighlightUrls(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CWhip::GetHighlightUrls()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CWhip::SetGreekImages(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CWhip::GetGreekImages()
{
	BOOL result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CWhip::SetLoadStreamAutomatically(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CWhip::GetLoadStreamAutomatically()
{
	BOOL result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CWhip::SetDropFile(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString CWhip::GetDropFile()
{
	CString result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CWhip::SetCursorMode(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CWhip::GetCursorMode()
{
	long result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CWhip::SetProxyAccessType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CWhip::GetProxyAccessType()
{
	long result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CWhip::SetProxyBypassServerList(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString CWhip::GetProxyBypassServerList()
{
	CString result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CWhip::SetProxyServerList(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString CWhip::GetProxyServerList()
{
	CString result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CWhip::SetMergeDwf(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CWhip::GetMergeDwf()
{
	BOOL result;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CWhip::SetForceArrowKeys(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CWhip::GetForceArrowKeys()
{
	BOOL result;
	InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CWhip::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

CString CWhip::_ExtractAndSetInitialViewFromURL(LPCTSTR url)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xf, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		url);
	return result;
}

BOOL CWhip::SetAndDrawView(BOOL adjust_aspect_ratio, double left, double right, double bottom, double top)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_R8 VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x10, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		adjust_aspect_ratio, left, right, bottom, top);
	return result;
}

BOOL CWhip::GetWindowExtents(long* left, long* right, long* bottom, long* top)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PI4 VTS_PI4 VTS_PI4 VTS_PI4;
	InvokeHelper(0x11, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		left, right, bottom, top);
	return result;
}

BOOL CWhip::GetDrawingExtents(double* left, double* right, double* bottom, double* top)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		left, right, bottom, top);
	return result;
}

BOOL CWhip::GetInitialView(BOOL* stream_fully_loaded, double* left, double* right, double* bottom, double* top)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PBOOL VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x13, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		stream_fully_loaded, left, right, bottom, top);
	return result;
}

BOOL CWhip::GetCurrentView(double* left, double* right, double* bottom, double* top)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		left, right, bottom, top);
	return result;
}

BOOL CWhip::SetAndDrawViewByName(BOOL adjust_aspect_ratio, LPCTSTR view_name)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_BSTR;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		adjust_aspect_ratio, view_name);
	return result;
}

BOOL CWhip::DrawCurrentViewToDC(BOOL adjust_aspect_ratio, long dc_handle, long subwindow_left, long subwindow_right, long subwindow_bottom, long subwindow_top, long full_width, long full_height, BOOL force_background_white, 
		BOOL force_geometry_black, BOOL use_mapped_colors, BOOL palette_in_background)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_BOOL VTS_BOOL VTS_BOOL VTS_BOOL;
	InvokeHelper(0x16, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		adjust_aspect_ratio, dc_handle, subwindow_left, subwindow_right, subwindow_bottom, subwindow_top, full_width, full_height, force_background_white, force_geometry_black, use_mapped_colors, palette_in_background);
	return result;
}

CString CWhip::GetNamedViewName()
{
	CString result;
	InvokeHelper(0x17, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL CWhip::GetNamedViewView(double* left, double* right, double* bottom, double* top)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		left, right, bottom, top);
	return result;
}

long CWhip::GetWindowExtentsLeft()
{
	long result;
	InvokeHelper(0x19, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CWhip::GetWindowExtentsRight()
{
	long result;
	InvokeHelper(0x1a, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CWhip::GetWindowExtentsBottom()
{
	long result;
	InvokeHelper(0x1b, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CWhip::GetWindowExtentsTop()
{
	long result;
	InvokeHelper(0x1c, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

double CWhip::GetDrawingExtentsLeft()
{
	double result;
	InvokeHelper(0x1d, DISPATCH_METHOD, VT_R8, (void*)&result, NULL);
	return result;
}

double CWhip::GetDrawingExtentsRight()
{
	double result;
	InvokeHelper(0x1e, DISPATCH_METHOD, VT_R8, (void*)&result, NULL);
	return result;
}

double CWhip::GetDrawingExtentsBottom()
{
	double result;
	InvokeHelper(0x1f, DISPATCH_METHOD, VT_R8, (void*)&result, NULL);
	return result;
}

double CWhip::GetDrawingExtentsTop()
{
	double result;
	InvokeHelper(0x20, DISPATCH_METHOD, VT_R8, (void*)&result, NULL);
	return result;
}

double CWhip::GetCurrentViewLeft()
{
	double result;
	InvokeHelper(0x21, DISPATCH_METHOD, VT_R8, (void*)&result, NULL);
	return result;
}

double CWhip::GetCurrentViewRight()
{
	double result;
	InvokeHelper(0x22, DISPATCH_METHOD, VT_R8, (void*)&result, NULL);
	return result;
}

double CWhip::GetCurrentViewBottom()
{
	double result;
	InvokeHelper(0x23, DISPATCH_METHOD, VT_R8, (void*)&result, NULL);
	return result;
}

double CWhip::GetCurrentViewTop()
{
	double result;
	InvokeHelper(0x24, DISPATCH_METHOD, VT_R8, (void*)&result, NULL);
	return result;
}

double CWhip::GetNamedViewLeft()
{
	double result;
	InvokeHelper(0x25, DISPATCH_METHOD, VT_R8, (void*)&result, NULL);
	return result;
}

double CWhip::GetNamedViewRight()
{
	double result;
	InvokeHelper(0x26, DISPATCH_METHOD, VT_R8, (void*)&result, NULL);
	return result;
}

double CWhip::GetNamedViewBottom()
{
	double result;
	InvokeHelper(0x27, DISPATCH_METHOD, VT_R8, (void*)&result, NULL);
	return result;
}

double CWhip::GetNamedViewTop()
{
	double result;
	InvokeHelper(0x28, DISPATCH_METHOD, VT_R8, (void*)&result, NULL);
	return result;
}

void CWhip::SetUserInterface(BOOL mode)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x29, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 mode);
}

BOOL CWhip::GetUserInterface()
{
	BOOL result;
	InvokeHelper(0x2a, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CWhip::SetHighlightURLs(BOOL highlight_urls)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x2b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 highlight_urls);
}

BOOL CWhip::GetHighlightURLs()
{
	BOOL result;
	InvokeHelper(0x2c, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CWhip::DrawView(double left, double right, double bottom, double top)
{
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x2d, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 left, right, bottom, top);
}

void CWhip::DrawNamedView(LPCTSTR name)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2e, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 name);
}

BOOL CWhip::BeginNamedViewSearch(LPCTSTR name)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		name);
	return result;
}

BOOL CWhip::FindNextNamedView()
{
	BOOL result;
	InvokeHelper(0x30, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

VARIANT CWhip::NamedViews(const VARIANT& item)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x31, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&item);
	return result;
}

VARIANT CWhip::Layers(const VARIANT& item)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x32, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&item);
	return result;
}

void CWhip::_StoreLayerInfo(BOOL vis_state, LPCTSTR layernames)
{
	static BYTE parms[] =
		VTS_BOOL VTS_BSTR;
	InvokeHelper(0x33, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 vis_state, layernames);
}

VARIANT CWhip::FindText(LPCTSTR item)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x34, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		item);
	return result;
}

void CWhip::Clear()
{
	InvokeHelper(0x35, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CWhip::AddByRef(long length, const VARIANT& buffer)
{
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT;
	InvokeHelper(0x36, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 length, &buffer);
}

void CWhip::Add(const VARIANT& item)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x37, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &item);
}

VARIANT CWhip::Links(const VARIANT& item)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x38, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&item);
	return result;
}

BOOL CWhip::BeginLayerSearch(LPCTSTR name)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x39, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		name);
	return result;
}

BOOL CWhip::FindNextLayer()
{
	BOOL result;
	InvokeHelper(0x3a, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

CString CWhip::GetLayerName()
{
	CString result;
	InvokeHelper(0x3b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL CWhip::GetLayerVisibility()
{
	BOOL result;
	InvokeHelper(0x3c, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CWhip::SetLayerVisibility(BOOL vis_state)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x3d, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 vis_state);
}

BOOL CWhip::BeginTextSearch(LPCTSTR name)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x3e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		name);
	return result;
}

BOOL CWhip::FindNextText()
{
	BOOL result;
	InvokeHelper(0x3f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

CString CWhip::GetTextString()
{
	CString result;
	InvokeHelper(0x40, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

double CWhip::GetTextLeft()
{
	double result;
	InvokeHelper(0x41, DISPATCH_METHOD, VT_R8, (void*)&result, NULL);
	return result;
}

double CWhip::GetTextRight()
{
	double result;
	InvokeHelper(0x42, DISPATCH_METHOD, VT_R8, (void*)&result, NULL);
	return result;
}

double CWhip::GetTextBottom()
{
	double result;
	InvokeHelper(0x43, DISPATCH_METHOD, VT_R8, (void*)&result, NULL);
	return result;
}

double CWhip::GetTextTop()
{
	double result;
	InvokeHelper(0x44, DISPATCH_METHOD, VT_R8, (void*)&result, NULL);
	return result;
}

void CWhip::GotoText(LPCTSTR name)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x45, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 name);
}

BOOL CWhip::BeginLinksSearch(LPCTSTR name)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x46, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		name);
	return result;
}

BOOL CWhip::FindNextLink()
{
	BOOL result;
	InvokeHelper(0x47, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

CString CWhip::GetLinkURL()
{
	CString result;
	InvokeHelper(0x48, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

double CWhip::GetLinkLeft()
{
	double result;
	InvokeHelper(0x49, DISPATCH_METHOD, VT_R8, (void*)&result, NULL);
	return result;
}

double CWhip::GetLinkRight()
{
	double result;
	InvokeHelper(0x4a, DISPATCH_METHOD, VT_R8, (void*)&result, NULL);
	return result;
}

double CWhip::GetLinkBottom()
{
	double result;
	InvokeHelper(0x4b, DISPATCH_METHOD, VT_R8, (void*)&result, NULL);
	return result;
}

double CWhip::GetLinkTop()
{
	double result;
	InvokeHelper(0x4c, DISPATCH_METHOD, VT_R8, (void*)&result, NULL);
	return result;
}

BOOL CWhip::PrintCurrentView()
{
	BOOL result;
	InvokeHelper(0x4d, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CWhip::DeleteLayer(LPCTSTR name)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x4e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		name);
	return result;
}

VARIANT CWhip::ComputeCoordinate(long from_space, long to_space, double x, double y)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_R8 VTS_R8;
	InvokeHelper(0x4f, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		from_space, to_space, x, y);
	return result;
}

void CWhip::DoDragAndDrop(LPCTSTR drop_file)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x50, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 drop_file);
}

BOOL CWhip::SetInsertionTranslation(double x, double y)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8;
	InvokeHelper(0x51, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		x, y);
	return result;
}

BOOL CWhip::SetInsertionScale(double x_scale, double y_scale)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8;
	InvokeHelper(0x52, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		x_scale, y_scale);
	return result;
}

void CWhip::ForceBackPalette(BOOL state)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x53, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 state);
}

CString CWhip::GetFileVersion()
{
	CString result;
	InvokeHelper(0x54, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString CWhip::GetUnits()
{
	CString result;
	InvokeHelper(0x55, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL CWhip::PrintSetup(BOOL white_background, BOOL black_geometry, BOOL show_dialog, const VARIANT& printer)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_BOOL VTS_BOOL VTS_VARIANT;
	InvokeHelper(0x56, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		white_background, black_geometry, show_dialog, &printer);
	return result;
}
